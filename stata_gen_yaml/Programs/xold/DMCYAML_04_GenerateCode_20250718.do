/* -------------------------------------------------------------------------------- */
/* Project: BioDataCatalyst Data Management Core									*/
/* RTI PI: Chris Siege																*/
/* Program: DMCYAML_04_GenerateCode													*/
/* Programmer: Sabrina McCutchan (CDMS)												*/
/* Date Created: 2025/06/19															*/
/* Date Last Updated: 2025/07/09													*/
/* Description:	This program generates codelines.			*/
/*		1. 																*/
/* 		2. Create key of variables 													*/
/*																					*/
/* Notes:  																			*/
/*		- WHI MeasurementObservations code generated and pushed to GitHub 2025/07/09*/
/*		  Another curator had already written YAML code for the only entities that	*/
/*		  had any "bad" codelines output, so the "bad" files generated by this 		*/
/*		  program weren't used.														*/
/* -------------------------------------------------------------------------------- */


/* ----- 0. Test ----- */
/*
foreach bdchm in hemat {
use "$temp\\FHS_clean.dta", clear

* Merge BDCHM key *;
merge m:1 merge_bdchm_label using "$doc\bdchm_key.dta"
drop if _merge==2
rename _merge merge_bdchm

* Isolate variable to test *;
keep if bdchm_varname=="`bdchm'"

* Merge pht *;
sort pht
merge m:1 pht using "$doc\pht_visit.dta"
drop if _merge==2
rename _merge merge_pht

* Convert units *;
tab var_units bdchm_unit
gen unit_match=1 if var_units==bdchm_unit
*browse if unit_match!=1

	* var_unit missing *;
		  * store bdchm_unit in local macro, search the string of source_variable_description for the unit, then add that unit to the var_units field if it's found *;
	replace var_unit="mg/dl" if source_variable_description=="Total cholesterol (mg/dL), Exam 3"
	replace unit_match=1 if var_units==bdchm_unit
	
	* var unit non-missing *;
		* output list of unique unit pairings *;
		* create separate conversion rules file that can be read in and apply to each unique unit pair *;
			* in conversion rules file, tag not-convertibale or nonsensical pairings. *;
		* output anything that can't be converted for human review *;

/*keep bdchm_entity bdchm_label bdchm_varname pht phv onto_id bdchm_unit associatedvisit participantidphv var_units bdchm_unit unit_match*/
drop transform_comment note
duplicates drop
gen conversion_rule=""
save "$temp\fhs\\`bdchm'.dta", replace

use "$temp\fhs\\`bdchm'.dta", clear
keep if unit_match==1
save"$temp\fhs\\`bdchm'_good.dta", replace /* file must be one row per phv to work due to local macro counting */

use "$temp\fhs\\`bdchm'.dta", clear
keep if unit_match!=1
save "$temp\fhs\\`bdchm'_bad.dta", replace /* file must be one row per phv to work due to local macro counting */
}
*/

/* ----- 0. Report ----- */
use "$der\bdchm_nofhscopd.dta", clear
/*keep cohort bdchm_entity phv source_variable_description row_good unit_match var_units bdchm_unit has_pht has_onto conversion_rule*/
order cohort bdchm_entity phv source_variable_description row_good unit_match var_units bdchm_unit has_pht has_onto conversion_rule
duplicates drop
sort phv bdchm_entity
duplicates list phv
keep if cohort=="whi" /*n=460 distinct phv/bdchm entity pairs. The same phv may be mapped to >1 entity*/
tab bdchm_entity, miss
	/*
BDCHM Entity, from key |      Freq.     Percent        Cum.
-----------------------+-----------------------------------
                       |          9        1.96        1.96
             Condition |        207       45.00       46.96
            Demography |         17        3.70       50.65
          DrugExposure |         29        6.30       56.96
MeasurementObservation |        152       33.04       90.00
           Observation |          4        0.87       90.87
                Person |         28        6.09       96.96
             Procedure |         11        2.39       99.35
       SdohObservation |          3        0.65      100.00
-----------------------+-----------------------------------

	*/
keep if bdchm_entity=="MeasurementObservation" /*n=152*/
tab row_good
browse if unit_match!=1 & conversion_rule==""

keep if unit_match!=1 & conversion_rule==""
save "$out\whi\whi_unitfix.dta", replace
export excel using "$out\whi\whi_unitfix.xlsx", firstrow(var) nolabel keepcellfmt replace

* Manually fix units in Excel *;
* Reimport *;
clear
import excel using "$out\whi\whi_unitfix_override.xlsx", sheet("Sheet1") firstrow case(lower) allstring 
keep phv var_units bad_map categorical_choices unit_not_convertible
rename var_units var_units_new
foreach var of varlist bad_map categorical_choices unit_not_convertible {
	destring `var', replace
	}
save "$temp\whi\whi_unitfix_override.dta", replace


* Add fixed units to data file *;
use "$der\bdchm_nofhscopd.dta", clear
/*keep cohort bdchm_entity bdchm_varname phv source_variable_description row_good unit_match var_units bdchm_unit has_pht has_onto conversion_rule*/
order cohort bdchm_entity bdchm_varname phv source_variable_description row_good unit_match var_units bdchm_unit has_pht has_onto conversion_rule
duplicates drop
sort phv bdchm_entity
keep if cohort=="whi"
keep if bdchm_entity=="MeasurementObservation" /*n=152*/
merge m:1 phv using "$temp\whi\whi_unitfix_override.dta"
replace var_units=var_units_new if var_units_new!=""
drop var_units_new _merge
replace unit_match=1 if var_units==bdchm_unit & bdchm_unit!=""
	 * override for specific variable *;
	 replace unit_match=1 if phv=="phv00283658"
replace row_good=1 if unit_match==1 & has_pht==1 & has_onto==1

* Exclude bad_maps or unmappable rows *;
drop if bad_map==1 | unit_not_convertible==1 /*n=49 deleted*/
keep phv bdchm_entity pht onto_id bdchm_unit associatedvisit participantidphv conversion_rule bdchm_varname cohort row_good

* Handle dupicates *;
duplicates drop
gen pair_id=phv+bdchm_varname 
duplicates list pair_id /* the same phv will get more than one code block per YAML file output if there are any duplicates of pairs */
save "$der\whi.dta", replace



/* ----- 1. Split data rows into those ready for automated code (good) and those needing manual intervention (bad) ----- */
/* Note: output files must be one row per phv to work due to local macro counting */

local entity = "MeasurementObservation"
local cohort = "whi"

foreach bdchm in $MeasurementObservation_whi { 
	use "$der\whi.dta", clear
	keep if bdchm_varname=="`bdchm'"
	keep if cohort=="`cohort'" 
	keep if row_good==1
	save "$temp\\`cohort'\\`bdchm'_good.dta", replace

	use "$der\whi.dta", clear
	keep if bdchm_varname=="`bdchm'"
	keep if cohort=="`cohort'"
	keep if row_good!=1
	save "$temp\\`cohort'\\`bdchm'_bad.dta", replace
	}

	


/* ----- 2. Write codelines ----- */
file close _all
local cohort = "whi"

foreach bdchm in $MeasurementObservation_whi {
use "$temp\\`cohort'\\`bdchm'_good.dta", clear /* file must be one row per phv to work due to local macro counting */

local nobs = _N

file open `bdchm'_good using "$out\\`cohort'\\`bdchm'_good.txt", write replace

forv i = 1/`nobs' { 
	local phv=phv[`i']
	local entity=bdchm_entity[`i']
	local pht=pht[`i']
	local onto=onto_id[`i']
	local unit=bdchm_unit[`i']
	local visit=associatedvisit[`i']
	local participant=participantidphv[`i']
	local convert=conversion_rule[`i']

if conversion_rule[`i']=="" {
file write `bdchm'_good "- class_derivations:" _n ///
	_column(5) "`entity'" ":" _n ///
			_column(7) "populated from: " "`pht'" _n ///
			_column(7) "slot_derivations:" _n ///
				_column(9) "associated_participant: " _n ///
					_column(11) "populated_from: " "`participant'" _n ///
				_column(9) "associated_visit: " _n ///		
					_column(11) "expr: " _char(39) _char(39) _char(39) "`visit'" _char(39) _char(39) _char(39) _n ///
				_column(9) "observation_type: " _n ///
					_column(11) "expr: " _char(39) _char(39) _char(39) "`onto'" _char(39) _char(39) _char(39) _n ///
				_column(9) "value_quantity:" _n ///
					_column(11) "object_derivations:" _n ///
					_column(11) "- class derivations:" _n ///
							_column(15) "Quantity:" _n ///
								_column(17) "populated_from: " "`pht'" _n ///
								_column(17) "slot_derivations:" _n ///
									_column(19) "value_decimal:" _n ///
										_column(21) "populated_from: " "`phv'" _n ///
									_column(19) "unit: " _n ///
										_column(21) "expr: " _char(39) _char(39) _char(39) "`unit'" _char(39) _char(39) _char(39) _n	

	}
else if conversion_rule[`i']!="" {
file write `bdchm'_good "- class_derivations:" _n ///
	_column(5) "`entity'" ":" _n ///
			_column(7) "populated from: " "`pht'" _n ///
			_column(7) "slot_derivations:" _n ///
				_column(9) "associated_participant: " _n ///
					_column(11) "populated_from: " "`participant'" _n ///
				_column(9) "associated_visit: " _n ///		
					_column(11) "expr: " _char(39) _char(39) _char(39) "`visit'" _char(39) _char(39) _char(39) _n ///
				_column(9) "observation_type: " _n ///
					_column(11) "expr: " _char(39) _char(39) _char(39) "`onto'" _char(39) _char(39) _char(39) _n ///
				_column(9) "value_quantity:" _n ///
					_column(11) "object_derivations:" _n ///
					_column(11) "- class derivations:" _n ///
							_column(15) "Quantity:" _n ///
								_column(17) "populated_from: " "`pht'" _n ///
								_column(17) "slot_derivations:" _n ///
									_column(19) "value_decimal:" _n ///
										_column(21) "expr: {" "`phv'" "} " "`convert'" _n ///
									_column(19) "unit: " _n ///
										_column(21) "expr: " _char(39) _char(39) _char(39) "`unit'" _char(39) _char(39) _char(39) _n
	}
	}		

file close `bdchm'_good
}









/* ----- 2. Manually review what isn't handled by code ----- */
file close _all


local cohort = "whi"

foreach bdchm in $MeasurementObservation_whi {
use "$temp\\`cohort'\\`bdchm'_bad.dta", clear /* file must be one row per phv to work due to local macro counting */
local nobs = _N

file open `bdchm'_bad using "$out\\`cohort'\\`bdchm'_bad.txt", write replace

forv i = 1/`nobs' { 
	local phv=phv[`i']
	local entity=bdchm_entity[`i']
	local pht=pht[`i']
	local onto=onto_id[`i']
	local unit=bdchm_unit[`i']
	local visit=associatedvisit[`i']
	local participant=participantidphv[`i']
	local convert=conversion_rule[`i']

file write `bdchm'_bad "- class_derivations:" _n ///
	_column(5) "`entity'" ":" _n ///
			_column(7) "populated from: " "`pht'" " #CHECK" _n ///
			_column(7) "slot_derivations:" _n ///
				_column(9) "associated_participant: " _n ///
					_column(11) "populated_from: " "`participant'" _n ///
				_column(9) "associated_visit: " _n ///		
					_column(11) "expr: " _char(39) _char(39) _char(39) "`visit'" _char(39) _char(39) _char(39) _n ///
				_column(9) "observation_type: " _n ///
					_column(11) "expr: " _char(39) _char(39) _char(39) "`onto'" _char(39) _char(39) _char(39) _n ///
				_column(9) "value_quantity:" _n ///
					_column(11) "object_derivations:" _n ///
					_column(11) "- class derivations:" _n ///
							_column(15) "Quantity:" _n ///
								_column(17) "populated_from: " "`pht'" _n ///
								_column(17) "slot_derivations:" _n ///
									_column(19) "value_decimal:" _n ///
										_column(21) "populated_from: " "`phv'" " #CHECK" _n ///
									_column(19) "unit: " _n ///
										_column(21) "expr: " _char(39) _char(39) _char(39) "`unit'" _char(39) _char(39) _char(39) " #CHECK" _n	
									
	}		

file close `bdchm'_bad
}





/* archive


/* ----- 2. Manually review what isn't handled by code ----- */
file close _all

foreach bdchm in tot_chol_bld_bad {
use "$temp\\`bdchm'.dta", clear
local nobs = _N

file open `bdchm' using "$out\\`bdchm'.txt", write replace

forv i = 1/`nobs' { 
	local phv=phv[`i']
	local entity=bdchm_entity[`i']
	local pht=pht[`i']
	local onto=onto_id[`i']
	local unit=bdchm_unit[`i']
	local visit=associatedvisit[`i']
	local participant=participantidphv[`i']

file write `bdchm' "- class_derivations:" _n ///
	_column(5) "`entity'" ":" _n ///
		_column(5) "populated from: " "`pht'" _n ///
		_column(5) "slot_derivations:" _n ///
			_column(7) "observation_type: " _n ///
				_column(9) "expr: " _char(34) _char(39) "`onto'" _char(39) _char(34) _n ///	
			_column(7) "value_decimal:" _n ///
				_column(9) "populated_from: " "`phv'" _n ///
			_column(7) "value_quantity_unit: " _n ///
				_column(9) "expr: " _char(34) _char(39) "'#CHECK'" _char(39) _char(34) _n ///	
			_column(7) "associated_visit: " _n ///
				_column(9) "value_mappings:" _n ///			
					_column(11) "expr: " _char(34) _char(39) "`visit'" _char(39) _char(34) _n ///
			_column(7) "associated_participant: " _n ///
				_column(9) "populated_from: " "`participant'" _n 			
	}		

file close `bdchm'
}